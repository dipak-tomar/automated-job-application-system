{"version":3,"file":"1bf9c02d-5349-448f-9ad0-54eeea78309e.mjs","sources":["../../../src/mastra/tools/jobSearchTool.ts"],"sourcesContent":["import { createTool } from \"@mastra/core/tools\";\nimport type { IMastraLogger } from \"@mastra/core/logger\";\nimport { z } from \"zod\";\nimport puppeteer from \"puppeteer\";\nimport axios from \"axios\";\nimport * as cheerio from \"cheerio\";\n\ninterface JobPosting {\n  title: string;\n  company: string;\n  location: string;\n  description: string;\n  url: string;\n  postedDate: string;\n  experience: string;\n  source: string;\n}\n\nconst searchLinkedInJobs = async ({\n  jobTitle,\n  experience,\n  logger,\n}: {\n  jobTitle: string;\n  experience: string;\n  logger?: IMastraLogger;\n}): Promise<JobPosting[]> => {\n  logger?.info(\"üîç [JobSearch] Starting LinkedIn job search\", { jobTitle, experience });\n  \n  try {\n    const browser = await puppeteer.launch({\n      headless: true,\n      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'],\n    });\n    \n    const page = await browser.newPage();\n    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');\n    \n    // Search for jobs on LinkedIn\n    const searchUrl = `https://www.linkedin.com/jobs/search/?keywords=${encodeURIComponent(jobTitle)}&location=India&f_TPR=r604800&f_E=${experience === 'entry' ? '1' : experience === 'mid' ? '2,3' : '4,5,6'}`;\n    \n    logger?.info(\"üåê [JobSearch] Navigating to LinkedIn\", { searchUrl });\n    await page.goto(searchUrl, { waitUntil: 'networkidle2' });\n    \n    // Wait for job listings to load\n    await page.waitForSelector('.job-search-card', { timeout: 10000 });\n    \n    const jobs = await page.evaluate(() => {\n      const jobCards = document.querySelectorAll('.job-search-card');\n      return Array.from(jobCards).slice(0, 10).map(card => {\n        const titleElement = card.querySelector('.base-search-card__title');\n        const companyElement = card.querySelector('.base-search-card__subtitle');\n        const locationElement = card.querySelector('.job-search-card__location');\n        const linkElement = card.querySelector('a');\n        const timeElement = card.querySelector('.job-search-card__listdate');\n        \n        return {\n          title: titleElement?.textContent?.trim() || '',\n          company: companyElement?.textContent?.trim() || '',\n          location: locationElement?.textContent?.trim() || '',\n          url: linkElement?.href || '',\n          postedDate: timeElement?.textContent?.trim() || '',\n          experience: '',\n          description: '',\n          source: 'LinkedIn'\n        };\n      });\n    });\n    \n    await browser.close();\n    logger?.info(\"‚úÖ [JobSearch] LinkedIn search completed\", { jobCount: jobs.length });\n    return jobs;\n    \n  } catch (error) {\n    logger?.error(\"‚ùå [JobSearch] LinkedIn search failed\", { error: error instanceof Error ? error.message : String(error) });\n    return [];\n  }\n};\n\nconst searchNaukriJobs = async ({\n  jobTitle,\n  experience,\n  logger,\n}: {\n  jobTitle: string;\n  experience: string;\n  logger?: IMastraLogger;\n}): Promise<JobPosting[]> => {\n  logger?.info(\"üîç [JobSearch] Starting Naukri job search\", { jobTitle, experience });\n  \n  try {\n    const browser = await puppeteer.launch({\n      headless: true,\n      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'],\n    });\n    \n    const page = await browser.newPage();\n    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');\n    \n    // Search for jobs on Naukri\n    const experienceMap = {\n      'entry': '0-2',\n      'mid': '2-5',\n      'senior': '5-10'\n    };\n    \n    const searchUrl = `https://www.naukri.com/jobs-in-india?k=${encodeURIComponent(jobTitle)}&experience=${experienceMap[experience as keyof typeof experienceMap] || '0-10'}`;\n    \n    logger?.info(\"üåê [JobSearch] Navigating to Naukri\", { searchUrl });\n    await page.goto(searchUrl, { waitUntil: 'networkidle2' });\n    \n    // Wait for job listings to load\n    await page.waitForSelector('.jobTuple', { timeout: 10000 });\n    \n    const jobs = await page.evaluate(() => {\n      const jobCards = document.querySelectorAll('.jobTuple');\n      return Array.from(jobCards).slice(0, 10).map(card => {\n        const titleElement = card.querySelector('.title');\n        const companyElement = card.querySelector('.companyInfo .subTitle');\n        const locationElement = card.querySelector('.locationsContainer .location');\n        const linkElement = card.querySelector('.title a');\n        const experienceElement = card.querySelector('.expwdth');\n        const timeElement = card.querySelector('.jobTupleFooter .fleft');\n        \n        return {\n          title: titleElement?.textContent?.trim() || '',\n          company: companyElement?.textContent?.trim() || '',\n          location: locationElement?.textContent?.trim() || '',\n          url: linkElement && 'href' in linkElement && typeof linkElement.href === 'string' ? `https://www.naukri.com${linkElement.href}` : '',\n          postedDate: timeElement?.textContent?.trim() || '',\n          experience: experienceElement?.textContent?.trim() || '',\n          description: '',\n          source: 'Naukri'\n        };\n      });\n    });\n    \n    await browser.close();\n    logger?.info(\"‚úÖ [JobSearch] Naukri search completed\", { jobCount: jobs.length });\n    return jobs;\n    \n  } catch (error) {\n    logger?.error(\"‚ùå [JobSearch] Naukri search failed\", { error: error instanceof Error ? error.message : String(error) });\n    return [];\n  }\n};\n\nexport const jobSearchTool = createTool({\n  id: \"job-search-tool\",\n  description: \"Searches for tech jobs posted this week on LinkedIn and Naukri based on job title and experience level\",\n  inputSchema: z.object({\n    jobTitle: z.string().default(\"Software Developer\").describe(\"Job title to search for (e.g., 'Software Developer', 'Full Stack Developer', 'React Developer')\"),\n    experienceLevel: z.enum([\"entry\", \"mid\", \"senior\"]).default(\"mid\").describe(\"Experience level: entry (0-2 years), mid (2-5 years), senior (5+ years)\"),\n  }),\n  outputSchema: z.object({\n    jobs: z.array(z.object({\n      title: z.string(),\n      company: z.string(),\n      location: z.string(),\n      description: z.string(),\n      url: z.string(),\n      postedDate: z.string(),\n      experience: z.string(),\n      source: z.string(),\n    })),\n    totalCount: z.number(),\n  }),\n  execute: async ({ context, mastra }) => {\n    const logger = mastra?.getLogger();\n    const { jobTitle, experienceLevel } = context;\n    \n    logger?.info('üîß [JobSearchTool] Starting job search execution', { jobTitle, experienceLevel });\n    \n    try {\n      // Search both platforms in parallel\n      const [linkedInJobs, naukriJobs] = await Promise.all([\n        searchLinkedInJobs({ jobTitle, experience: experienceLevel, logger }),\n        searchNaukriJobs({ jobTitle, experience: experienceLevel, logger }),\n      ]);\n      \n      const allJobs = [...linkedInJobs, ...naukriJobs];\n      \n      // Filter jobs posted this week (within last 7 days)\n      const oneWeekAgo = new Date();\n      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n      \n      const recentJobs = allJobs.filter(job => {\n        // Simple date filtering - in production, you'd want more robust date parsing\n        const postedText = job.postedDate.toLowerCase();\n        return postedText.includes('day') || postedText.includes('hour') || \n               postedText.includes('today') || postedText.includes('yesterday') ||\n               postedText.includes('1 week') || postedText.includes('2 day') ||\n               postedText.includes('3 day') || postedText.includes('4 day') ||\n               postedText.includes('5 day') || postedText.includes('6 day');\n      });\n      \n      logger?.info('‚úÖ [JobSearchTool] Job search completed successfully', { \n        totalJobs: allJobs.length,\n        recentJobs: recentJobs.length,\n        linkedInCount: linkedInJobs.length,\n        naukriCount: naukriJobs.length \n      });\n      \n      return {\n        jobs: recentJobs,\n        totalCount: recentJobs.length,\n      };\n      \n    } catch (error) {\n      logger?.error('‚ùå [JobSearchTool] Job search failed', { error: error instanceof Error ? error.message : String(error) });\n      throw error;\n    }\n  },\n});"],"names":[],"mappings":"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"}