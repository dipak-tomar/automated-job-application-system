{"version":3,"file":"80e8974b-d7b8-4246-9532-164b151bcbfa.mjs","sources":["../../../src/mastra/tools/sheetsTrackerTool.ts"],"sourcesContent":["import { createTool } from \"@mastra/core/tools\";\nimport type { IMastraLogger } from \"@mastra/core/logger\";\nimport { z } from \"zod\";\nimport { google } from \"googleapis\";\n\ninterface JobApplicationRecord {\n  jobTitle: string;\n  company: string;\n  location: string;\n  source: string;\n  jobUrl: string;\n  applicationStatus: 'applied' | 'failed' | 'already_applied' | 'pending';\n  appliedDate: string;\n  notes: string;\n}\n\nconst createSheetsService = async (logger?: IMastraLogger) => {\n  try {\n    // For this demo, we'll use a service account approach\n    // In production, you'd want to use proper OAuth or service account credentials\n    \n    // Create a dummy auth for demonstration\n    const auth = new google.auth.GoogleAuth({\n      scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n      // In production, you'd set credentials here\n    });\n    \n    const sheets = google.sheets({ version: 'v4', auth });\n    return sheets;\n    \n  } catch (error) {\n    logger?.error(\"‚ùå [SheetsTracker] Failed to create sheets service\", { \n      error: error instanceof Error ? error.message : String(error) \n    });\n    throw error;\n  }\n};\n\nconst createJobTrackingSheet = async (\n  sheetsService: any,\n  spreadsheetId: string,\n  logger?: IMastraLogger\n): Promise<void> => {\n  logger?.info(\"üìä [SheetsTracker] Creating job tracking sheet\");\n  \n  try {\n    // Check if the sheet already exists\n    const spreadsheet = await sheetsService.spreadsheets.get({\n      spreadsheetId,\n    });\n    \n    const existingSheet = spreadsheet.data.sheets?.find(\n      (sheet: any) => sheet.properties?.title === 'Job Applications'\n    );\n    \n    if (existingSheet) {\n      logger?.info(\"üìä [SheetsTracker] Job tracking sheet already exists\");\n      return;\n    }\n    \n    // Create the sheet\n    await sheetsService.spreadsheets.batchUpdate({\n      spreadsheetId,\n      requestBody: {\n        requests: [\n          {\n            addSheet: {\n              properties: {\n                title: 'Job Applications',\n                gridProperties: {\n                  rowCount: 1000,\n                  columnCount: 10,\n                },\n              },\n            },\n          },\n        ],\n      },\n    });\n    \n    // Add headers\n    const headers = [\n      'Date Applied',\n      'Job Title',\n      'Company',\n      'Location',\n      'Source',\n      'Application Status',\n      'Job URL',\n      'Notes',\n      'Follow-up Date',\n      'Response Status'\n    ];\n    \n    await sheetsService.spreadsheets.values.update({\n      spreadsheetId,\n      range: 'Job Applications!A1:J1',\n      valueInputOption: 'RAW',\n      requestBody: {\n        values: [headers],\n      },\n    });\n    \n    logger?.info(\"‚úÖ [SheetsTracker] Job tracking sheet created successfully\");\n    \n  } catch (error) {\n    logger?.error(\"‚ùå [SheetsTracker] Failed to create job tracking sheet\", { \n      error: error instanceof Error ? error.message : String(error) \n    });\n    throw error;\n  }\n};\n\nconst addJobApplicationRecord = async (\n  sheetsService: any,\n  spreadsheetId: string,\n  record: JobApplicationRecord,\n  logger?: IMastraLogger\n): Promise<void> => {\n  logger?.info(\"üìù [SheetsTracker] Adding job application record\", { \n    jobTitle: record.jobTitle,\n    company: record.company,\n    status: record.applicationStatus \n  });\n  \n  try {\n    // Get existing data to find the next empty row\n    const response = await sheetsService.spreadsheets.values.get({\n      spreadsheetId,\n      range: 'Job Applications!A:A',\n    });\n    \n    const nextRow = response.data.values ? response.data.values.length + 1 : 2;\n    \n    const values = [\n      record.appliedDate,\n      record.jobTitle,\n      record.company,\n      record.location,\n      record.source,\n      record.applicationStatus,\n      record.jobUrl,\n      record.notes,\n      '', // Follow-up date (empty for now)\n      'Pending' // Response status\n    ];\n    \n    await sheetsService.spreadsheets.values.update({\n      spreadsheetId,\n      range: `Job Applications!A${nextRow}:J${nextRow}`,\n      valueInputOption: 'RAW',\n      requestBody: {\n        values: [values],\n      },\n    });\n    \n    logger?.info(\"‚úÖ [SheetsTracker] Job application record added successfully\", { row: nextRow });\n    \n  } catch (error) {\n    logger?.error(\"‚ùå [SheetsTracker] Failed to add job application record\", { \n      error: error instanceof Error ? error.message : String(error) \n    });\n    throw error;\n  }\n};\n\nexport const sheetsTrackerTool = createTool({\n  id: \"sheets-tracker-tool\",\n  description: \"Tracks job applications in a Google Sheets spreadsheet with application status and details\",\n  inputSchema: z.object({\n    spreadsheetId: z.string().default(\"demo-spreadsheet-id\").describe(\"Google Sheets spreadsheet ID where job applications will be tracked\"),\n    jobApplications: z.array(z.object({\n      jobTitle: z.string(),\n      company: z.string(),\n      location: z.string(),\n      source: z.string(),\n      jobUrl: z.string(),\n      applicationStatus: z.enum(['applied', 'failed', 'already_applied', 'pending']),\n      appliedDate: z.string(),\n      notes: z.string(),\n    })).describe(\"Array of job applications to add to the tracking sheet\"),\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    recordsAdded: z.number(),\n    spreadsheetUrl: z.string(),\n    message: z.string(),\n  }),\n  execute: async ({ context, mastra }) => {\n    const logger = mastra?.getLogger();\n    const { spreadsheetId, jobApplications } = context;\n    \n    logger?.info('üîß [SheetsTracker] Starting job application tracking', { \n      spreadsheetId,\n      recordCount: jobApplications.length \n    });\n    \n    try {\n      // For demo purposes, we'll simulate the Google Sheets integration\n      // In production, you'd use real Google Sheets API\n      \n      logger?.info(\"üìä [SheetsTracker] Simulating Google Sheets integration\");\n      \n      // Simulate creating/updating the tracking sheet\n      logger?.info(\"üìù [SheetsTracker] Processing job application records\");\n      \n      let recordsAdded = 0;\n      \n      for (const application of jobApplications) {\n        try {\n          // Simulate adding each record\n          logger?.info(\"üìù [SheetsTracker] Adding record\", { \n            jobTitle: application.jobTitle,\n            company: application.company,\n            status: application.applicationStatus \n          });\n          \n          // In a real implementation, you would:\n          // const sheetsService = await createSheetsService(logger);\n          // await createJobTrackingSheet(sheetsService, spreadsheetId, logger);\n          // await addJobApplicationRecord(sheetsService, spreadsheetId, application, logger);\n          \n          recordsAdded++;\n          \n        } catch (error) {\n          logger?.error(\"‚ùå [SheetsTracker] Failed to add record\", { \n            jobTitle: application.jobTitle,\n            error: error instanceof Error ? error.message : String(error) \n          });\n        }\n      }\n      \n      const spreadsheetUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}`;\n      \n      logger?.info('‚úÖ [SheetsTracker] Job application tracking completed', { \n        recordsAdded,\n        spreadsheetUrl \n      });\n      \n      return {\n        success: true,\n        recordsAdded,\n        spreadsheetUrl,\n        message: `Successfully tracked ${recordsAdded} job applications in Google Sheets. Note: This is a demo implementation - in production, real Google Sheets API integration would be used.`,\n      };\n      \n    } catch (error) {\n      logger?.error('‚ùå [SheetsTracker] Job application tracking failed', { \n        error: error instanceof Error ? error.message : String(error) \n      });\n      \n      return {\n        success: false,\n        recordsAdded: 0,\n        spreadsheetUrl: '',\n        message: `Job application tracking failed: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  },\n});"],"names":[],"mappings":"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"}