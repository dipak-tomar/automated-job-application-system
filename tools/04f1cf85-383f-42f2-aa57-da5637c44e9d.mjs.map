{"version":3,"file":"04f1cf85-383f-42f2-aa57-da5637c44e9d.mjs","sources":["../../../src/mastra/tools/applicationFillerTool.ts"],"sourcesContent":["import { createTool } from \"@mastra/core/tools\";\nimport type { IMastraLogger } from \"@mastra/core/logger\";\nimport { z } from \"zod\";\nimport puppeteer, { Browser, Page } from \"puppeteer\";\n\ninterface ApplicationFormData {\n  personalInfo: {\n    name: string;\n    email: string;\n    phone: string;\n    location: string;\n    linkedIn?: string;\n    github?: string;\n  };\n  summary: string;\n  experience: Array<{\n    title: string;\n    company: string;\n    duration: string;\n    description: string;\n  }>;\n  skills: string[];\n  education: Array<{\n    degree: string;\n    institution: string;\n    year: string;\n  }>;\n}\n\ninterface JobApplication {\n  jobUrl: string;\n  status: 'applied' | 'failed' | 'already_applied';\n  message: string;\n}\n\nconst fillLinkedInApplication = async (\n  jobUrl: string,\n  formData: ApplicationFormData,\n  page: Page,\n  logger?: IMastraLogger\n): Promise<JobApplication> => {\n  logger?.info(\"üîß [ApplicationFiller] Filling LinkedIn application\", { jobUrl });\n  \n  try {\n    await page.goto(jobUrl, { waitUntil: 'networkidle2' });\n    \n    // Check if already applied\n    const alreadyApplied = await page.$('.artdeco-inline-feedback--success');\n    if (alreadyApplied) {\n      return {\n        jobUrl,\n        status: 'already_applied',\n        message: 'Already applied to this position'\n      };\n    }\n    \n    // Look for Easy Apply button\n    const easyApplyButton = await page.$('button[aria-label*=\"Easy Apply\"]');\n    if (!easyApplyButton) {\n      return {\n        jobUrl,\n        status: 'failed',\n        message: 'Easy Apply not available for this position'\n      };\n    }\n    \n    await easyApplyButton.click();\n    await page.waitForTimeout(2000);\n    \n    // Fill basic information\n    const phoneInput = await page.$('input[name=\"phoneNumber\"]');\n    if (phoneInput) {\n      await phoneInput.click({ clickCount: 3 });\n      await phoneInput.type(formData.personalInfo.phone);\n    }\n    \n    // Fill cover letter or additional info\n    const coverLetterTextarea = await page.$('textarea[name=\"message\"]');\n    if (coverLetterTextarea) {\n      const coverLetter = `Dear Hiring Manager,\\n\\n${formData.summary}\\n\\nKey Skills: ${formData.skills.slice(0, 5).join(', ')}\\n\\nI am excited about this opportunity and would love to contribute to your team.\\n\\nBest regards,\\n${formData.personalInfo.name}`;\n      await coverLetterTextarea.type(coverLetter);\n    }\n    \n    // Handle multi-step application process\n    let currentStep = 0;\n    const maxSteps = 5;\n    \n    while (currentStep < maxSteps) {\n      // Look for Next button\n      const nextButton = await page.$('button[aria-label=\"Continue to next step\"]') || \n                        await page.$('button:has-text(\"Next\")') ||\n                        await page.$('button[type=\"submit\"]');\n      \n      if (!nextButton) {\n        break;\n      }\n      \n      // Check if it's the submit button\n      const buttonText = await nextButton.textContent();\n      if (buttonText?.toLowerCase().includes('submit') || \n          buttonText?.toLowerCase().includes('send application')) {\n        await nextButton.click();\n        await page.waitForTimeout(3000);\n        break;\n      }\n      \n      await nextButton.click();\n      await page.waitForTimeout(2000);\n      currentStep++;\n    }\n    \n    // Verify submission\n    const successMessage = await page.$('.artdeco-inline-feedback--success');\n    if (successMessage) {\n      return {\n        jobUrl,\n        status: 'applied',\n        message: 'Successfully applied to the position'\n      };\n    }\n    \n    return {\n      jobUrl,\n      status: 'failed',\n      message: 'Application process incomplete or failed'\n    };\n    \n  } catch (error) {\n    logger?.error(\"‚ùå [ApplicationFiller] LinkedIn application failed\", { \n      jobUrl, \n      error: error instanceof Error ? error.message : String(error) \n    });\n    return {\n      jobUrl,\n      status: 'failed',\n      message: `Application failed: ${error instanceof Error ? error.message : String(error)}`\n    };\n  }\n};\n\nconst fillNaukriApplication = async (\n  jobUrl: string,\n  formData: ApplicationFormData,\n  page: Page,\n  logger?: IMastraLogger\n): Promise<JobApplication> => {\n  logger?.info(\"üîß [ApplicationFiller] Filling Naukri application\", { jobUrl });\n  \n  try {\n    await page.goto(jobUrl, { waitUntil: 'networkidle2' });\n    \n    // Look for Apply button\n    const applyButton = await page.$('button.apply') || \n                       await page.$('a.apply') ||\n                       await page.$('button:has-text(\"Apply\")');\n    \n    if (!applyButton) {\n      return {\n        jobUrl,\n        status: 'failed',\n        message: 'Apply button not found on this job posting'\n      };\n    }\n    \n    await applyButton.click();\n    await page.waitForTimeout(3000);\n    \n    // Fill additional information if required\n    const additionalInfoTextarea = await page.$('textarea[name=\"coverLetter\"]') ||\n                                  await page.$('textarea[placeholder*=\"cover letter\"]');\n    \n    if (additionalInfoTextarea) {\n      const coverLetter = `Dear Hiring Manager,\\n\\n${formData.summary}\\n\\nRelevant Experience:\\n${formData.experience.map(exp => `- ${exp.title} at ${exp.company} (${exp.duration})`).join('\\n')}\\n\\nTechnical Skills: ${formData.skills.join(', ')}\\n\\nI am excited about this opportunity and look forward to hearing from you.\\n\\nBest regards,\\n${formData.personalInfo.name}`;\n      await additionalInfoTextarea.type(coverLetter);\n    }\n    \n    // Submit application\n    const submitButton = await page.$('button[type=\"submit\"]') ||\n                        await page.$('button:has-text(\"Submit\")') ||\n                        await page.$('input[type=\"submit\"]');\n    \n    if (submitButton) {\n      await submitButton.click();\n      await page.waitForTimeout(3000);\n    }\n    \n    // Check for success indicators\n    const successElements = await page.$$('.success, .applied, .application-success');\n    if (successElements.length > 0) {\n      return {\n        jobUrl,\n        status: 'applied',\n        message: 'Successfully applied to the position'\n      };\n    }\n    \n    return {\n      jobUrl,\n      status: 'applied',\n      message: 'Application submitted (verification pending)'\n    };\n    \n  } catch (error) {\n    logger?.error(\"‚ùå [ApplicationFiller] Naukri application failed\", { \n      jobUrl, \n      error: error instanceof Error ? error.message : String(error) \n    });\n    return {\n      jobUrl,\n      status: 'failed',\n      message: `Application failed: ${error instanceof Error ? error.message : String(error)}`\n    };\n  }\n};\n\nexport const applicationFillerTool = createTool({\n  id: \"application-filler-tool\",\n  description: \"Automatically fills job application forms on LinkedIn and Naukri using resume data\",\n  inputSchema: z.object({\n    jobUrl: z.string().describe(\"URL of the job posting to apply to\"),\n    resumeData: z.object({\n      personalInfo: z.object({\n        name: z.string(),\n        email: z.string(),\n        phone: z.string(),\n        location: z.string(),\n        linkedIn: z.string().optional(),\n        github: z.string().optional(),\n      }),\n      summary: z.string(),\n      experience: z.array(z.object({\n        title: z.string(),\n        company: z.string(),\n        duration: z.string(),\n        description: z.string(),\n      })),\n      skills: z.array(z.string()),\n      education: z.array(z.object({\n        degree: z.string(),\n        institution: z.string(),\n        year: z.string(),\n      })),\n    }),\n  }),\n  outputSchema: z.object({\n    jobUrl: z.string(),\n    status: z.enum(['applied', 'failed', 'already_applied']),\n    message: z.string(),\n    timestamp: z.string(),\n  }),\n  execute: async ({ context, mastra }) => {\n    const logger = mastra?.getLogger();\n    const { jobUrl, resumeData } = context;\n    \n    logger?.info('üîß [ApplicationFiller] Starting application process', { jobUrl });\n    \n    let browser: Browser | null = null;\n    \n    try {\n      browser = await puppeteer.launch({\n        headless: true,\n        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'],\n      });\n      \n      const page = await browser.newPage();\n      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');\n      \n      let result: JobApplication;\n      \n      if (jobUrl.includes('linkedin.com')) {\n        result = await fillLinkedInApplication(jobUrl, resumeData, page, logger);\n      } else if (jobUrl.includes('naukri.com')) {\n        result = await fillNaukriApplication(jobUrl, resumeData, page, logger);\n      } else {\n        result = {\n          jobUrl,\n          status: 'failed',\n          message: 'Unsupported job site. Only LinkedIn and Naukri are supported.'\n        };\n      }\n      \n      logger?.info('‚úÖ [ApplicationFiller] Application process completed', { \n        jobUrl, \n        status: result.status,\n        message: result.message \n      });\n      \n      return {\n        ...result,\n        timestamp: new Date().toISOString(),\n      };\n      \n    } catch (error) {\n      logger?.error('‚ùå [ApplicationFiller] Application process failed', { \n        jobUrl, \n        error: error instanceof Error ? error.message : String(error) \n      });\n      \n      return {\n        jobUrl,\n        status: 'failed' as const,\n        message: `Application failed: ${error instanceof Error ? error.message : String(error)}`,\n        timestamp: new Date().toISOString(),\n      };\n    } finally {\n      if (browser) {\n        await browser.close();\n      }\n    }\n  },\n});"],"names":[],"mappings":"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"}