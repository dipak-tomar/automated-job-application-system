{"version":3,"file":"66916740-2bbb-4dfc-b51a-4cd638072e33.mjs","sources":["../../../src/integrations/github.ts","../../../src/mastra/tools/githubPushTool.ts"],"sourcesContent":["import { Octokit } from '@octokit/rest'\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('GitHub not connected');\n  }\n  return accessToken;\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableGitHubClient() {\n  const accessToken = await getAccessToken();\n  return new Octokit({ auth: accessToken });\n}","import { createTool } from \"@mastra/core/tools\";\nimport type { IMastraLogger } from \"@mastra/core/logger\";\nimport { z } from \"zod\";\nimport { getUncachableGitHubClient } from \"../../integrations/github\";\nimport { readFileSync, readdirSync, statSync } from \"fs\";\nimport { join, relative } from \"path\";\n\nconst getAllFiles = (dirPath: string, arrayOfFiles: string[] = []): string[] => {\n  const files = readdirSync(dirPath);\n\n  arrayOfFiles = arrayOfFiles || [];\n\n  files.forEach((file) => {\n    const fullPath = join(dirPath, file);\n    if (statSync(fullPath).isDirectory()) {\n      // Skip node_modules, .git, and other unnecessary directories\n      if (!['node_modules', '.git', '.next', 'dist', 'build', '.env'].includes(file)) {\n        arrayOfFiles = getAllFiles(fullPath, arrayOfFiles);\n      }\n    } else {\n      // Skip certain file types\n      if (!file.match(/\\.(log|tmp|cache)$/)) {\n        arrayOfFiles.push(fullPath);\n      }\n    }\n  });\n\n  return arrayOfFiles;\n};\n\nexport const githubPushTool = createTool({\n  id: \"github-push-tool\",\n  description: \"Creates a GitHub repository and uploads the entire project code\",\n  inputSchema: z.object({\n    repositoryName: z.string().describe(\"Name of the GitHub repository to create\"),\n    description: z.string().describe(\"Description of the repository\"),\n    isPrivate: z.boolean().default(false).describe(\"Whether the repository should be private\"),\n  }),\n  outputSchema: z.object({\n    repositoryUrl: z.string(),\n    success: z.boolean(),\n    message: z.string(),\n  }),\n  execute: async ({ context: { repositoryName, description, isPrivate }, mastra }) => {\n    const logger = mastra?.getLogger();\n    logger?.info('üöÄ [GitHubPush] Starting repository creation and code upload', { repositoryName });\n\n    try {\n      const octokit = await getUncachableGitHubClient();\n      \n      // Get authenticated user info\n      const { data: user } = await octokit.rest.users.getAuthenticated();\n      logger?.info('üìù [GitHubPush] Authenticated as user', { username: user.login });\n\n      // Create repository\n      logger?.info('üìù [GitHubPush] Creating repository');\n      const { data: repo } = await octokit.rest.repos.createForAuthenticatedUser({\n        name: repositoryName,\n        description,\n        private: isPrivate,\n        auto_init: true,\n      });\n\n      logger?.info('‚úÖ [GitHubPush] Repository created successfully', { \n        repoUrl: repo.html_url,\n        repoName: repo.full_name \n      });\n\n      // Get all files from the project\n      const projectRoot = process.cwd();\n      const allFiles = getAllFiles(projectRoot);\n      \n      logger?.info('üìù [GitHubPush] Found files to upload', { fileCount: allFiles.length });\n\n      // Upload files to repository\n      for (const filePath of allFiles) {\n        try {\n          const relativePath = relative(projectRoot, filePath);\n          const content = readFileSync(filePath);\n          const base64Content = content.toString('base64');\n\n          await octokit.rest.repos.createOrUpdateFileContents({\n            owner: user.login,\n            repo: repositoryName,\n            path: relativePath,\n            message: `Add ${relativePath}`,\n            content: base64Content,\n          });\n\n          logger?.info('üìÑ [GitHubPush] Uploaded file', { file: relativePath });\n        } catch (fileError) {\n          logger?.warn('‚ö†Ô∏è [GitHubPush] Failed to upload file', { \n            file: relative(projectRoot, filePath),\n            error: fileError \n          });\n        }\n      }\n\n      logger?.info('‚úÖ [GitHubPush] All files uploaded successfully');\n\n      return {\n        repositoryUrl: repo.html_url,\n        success: true,\n        message: `Repository created successfully at ${repo.html_url}`,\n      };\n\n    } catch (error) {\n      logger?.error('‚ùå [GitHubPush] Failed to create repository or upload files', { error });\n      \n      return {\n        repositoryUrl: \"\",\n        success: false,\n        message: `Failed to create repository: ${error}`,\n      };\n    }\n  },\n});"],"names":[],"mappings":";;;;;;AAEA,IAAI,kBAAA;AAEJ,eAAe,cAAA,GAAiB;AAC9B,EAAA,IAAI,kBAAA,IAAsB,kBAAA,CAAmB,QAAA,CAAS,UAAA,IAAc,IAAI,IAAA,CAAK,kBAAA,CAAmB,QAAA,CAAS,UAAU,CAAA,CAAE,OAAA,EAAQ,GAAI,IAAA,CAAK,KAAI,EAAG;AAC3I,IAAA,OAAO,mBAAmB,QAAA,CAAS,YAAA;AAAA,EACrC;AAEA,EAAA,MAAM,QAAA,GAAW,QAAQ,GAAA,CAAI,0BAAA;AAC7B,EAAA,MAAM,YAAA,GAAe,OAAA,CAAQ,GAAA,CAAI,aAAA,GAC7B,UAAU,OAAA,CAAQ,GAAA,CAAI,aAAA,GACtB,OAAA,CAAQ,GAAA,CAAI,gBAAA,GACZ,OAAA,GAAU,OAAA,CAAQ,IAAI,gBAAA,GACtB,IAAA;AAEJ,EAAA,IAAI,CAAC,YAAA,EAAc;AACjB,IAAA,MAAM,IAAI,MAAM,wCAAwC,CAAA;AAAA,EAC1D;AAEA,EAAA,kBAAA,GAAqB,MAAM,KAAA;AAAA,IACzB,aAAa,QAAA,GAAW,gEAAA;AAAA,IACxB;AAAA,MACE,OAAA,EAAS;AAAA,QACP,QAAA,EAAU,kBAAA;AAAA,QACV,gBAAA,EAAkB;AAAA;AACpB;AACF,GACF,CAAE,IAAA,CAAK,CAAA,GAAA,KAAO,GAAA,CAAI,IAAA,EAAM,CAAA,CAAE,IAAA,CAAK,CAAA,IAAA,KAAQ,IAAA,CAAK,KAAA,GAAQ,CAAC,CAAC,CAAA;AAEtD,EAAA,MAAM,cAAc,kBAAA,EAAoB,QAAA,EAAU,gBAAgB,kBAAA,CAAmB,QAAA,EAAU,OAAO,WAAA,EAAa,YAAA;AAEnH,EAAA,IAAI,CAAC,kBAAA,IAAsB,CAAC,WAAA,EAAa;AACvC,IAAA,MAAM,IAAI,MAAM,sBAAsB,CAAA;AAAA,EACxC;AACA,EAAA,OAAO,WAAA;AACT;AAKA,eAAsB,yBAAA,GAA4B;AAChD,EAAA,MAAM,WAAA,GAAc,MAAM,cAAA,EAAe;AACzC,EAAA,OAAO,IAAI,OAAA,CAAQ,EAAE,IAAA,EAAM,aAAa,CAAA;AAC1C;;ACrCA,MAAM,WAAA,GAAc,CAAC,OAAA,EAAiB,YAAA,GAAyB,EAAC,KAAgB;AAC9E,EAAA,MAAM,KAAA,GAAQ,YAAY,OAAO,CAAA;AAEjC,EAAA,YAAA,GAAe,gBAAgB,EAAC;AAEhC,EAAA,KAAA,CAAM,OAAA,CAAQ,CAAC,IAAA,KAAS;AACtB,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,OAAA,EAAS,IAAI,CAAA;AACnC,IAAA,IAAI,QAAA,CAAS,QAAQ,CAAA,CAAE,WAAA,EAAY,EAAG;AAEpC,MAAA,IAAI,CAAC,CAAC,cAAA,EAAgB,MAAA,EAAQ,OAAA,EAAS,MAAA,EAAQ,OAAA,EAAS,MAAM,CAAA,CAAE,QAAA,CAAS,IAAI,CAAA,EAAG;AAC9E,QAAA,YAAA,GAAe,WAAA,CAAY,UAAU,YAAY,CAAA;AAAA,MACnD;AAAA,IACF,CAAA,MAAO;AAEL,MAAA,IAAI,CAAC,IAAA,CAAK,KAAA,CAAM,oBAAoB,CAAA,EAAG;AACrC,QAAA,YAAA,CAAa,KAAK,QAAQ,CAAA;AAAA,MAC5B;AAAA,IACF;AAAA,EACF,CAAC,CAAA;AAED,EAAA,OAAO,YAAA;AACT,CAAA;AAEO,MAAM,iBAAiB,UAAA,CAAW;AAAA,EACvC,EAAA,EAAI,kBAAA;AAAA,EACJ,WAAA,EAAa,iEAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,cAAA,EAAgB,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,yCAAyC,CAAA;AAAA,IAC7E,WAAA,EAAa,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,+BAA+B,CAAA;AAAA,IAChE,SAAA,EAAW,EAAE,OAAA,EAAQ,CAAE,QAAQ,KAAK,CAAA,CAAE,SAAS,0CAA0C;AAAA,GAC1F,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,aAAA,EAAe,EAAE,MAAA,EAAO;AAAA,IACxB,OAAA,EAAS,EAAE,OAAA,EAAQ;AAAA,IACnB,OAAA,EAAS,EAAE,MAAA;AAAO,GACnB,CAAA;AAAA,EACD,OAAA,EAAS,OAAO,EAAE,OAAA,EAAS,EAAE,gBAAgB,WAAA,EAAa,SAAA,EAAU,EAAG,MAAA,EAAO,KAAM;AAClF,IAAA,MAAM,MAAA,GAAS,QAAQ,SAAA,EAAU;AACjC,IAAA,MAAA,EAAQ,IAAA,CAAK,qEAAA,EAAgE,EAAE,cAAA,EAAgB,CAAA;AAE/F,IAAA,IAAI;AACF,MAAA,MAAM,OAAA,GAAU,MAAM,yBAAA,EAA0B;AAGhD,MAAA,MAAM,EAAE,MAAM,IAAA,EAAK,GAAI,MAAM,OAAA,CAAQ,IAAA,CAAK,MAAM,gBAAA,EAAiB;AACjE,MAAA,MAAA,EAAQ,KAAK,8CAAA,EAAyC,EAAE,QAAA,EAAU,IAAA,CAAK,OAAO,CAAA;AAG9E,MAAA,MAAA,EAAQ,KAAK,4CAAqC,CAAA;AAClD,MAAA,MAAM,EAAE,MAAM,IAAA,EAAK,GAAI,MAAM,OAAA,CAAQ,IAAA,CAAK,MAAM,0BAAA,CAA2B;AAAA,QACzE,IAAA,EAAM,cAAA;AAAA,QACN,WAAA;AAAA,QACA,OAAA,EAAS,SAAA;AAAA,QACT,SAAA,EAAW;AAAA,OACZ,CAAA;AAED,MAAA,MAAA,EAAQ,KAAK,qDAAA,EAAkD;AAAA,QAC7D,SAAS,IAAA,CAAK,QAAA;AAAA,QACd,UAAU,IAAA,CAAK;AAAA,OAChB,CAAA;AAGD,MAAA,MAAM,WAAA,GAAc,QAAQ,GAAA,EAAI;AAChC,MAAA,MAAM,QAAA,GAAW,YAAY,WAAW,CAAA;AAExC,MAAA,MAAA,EAAQ,KAAK,8CAAA,EAAyC,EAAE,SAAA,EAAW,QAAA,CAAS,QAAQ,CAAA;AAGpF,MAAA,KAAA,MAAW,YAAY,QAAA,EAAU;AAC/B,QAAA,IAAI;AACF,UAAA,MAAM,YAAA,GAAe,QAAA,CAAS,WAAA,EAAa,QAAQ,CAAA;AACnD,UAAA,MAAM,OAAA,GAAU,aAAa,QAAQ,CAAA;AACrC,UAAA,MAAM,aAAA,GAAgB,OAAA,CAAQ,QAAA,CAAS,QAAQ,CAAA;AAE/C,UAAA,MAAM,OAAA,CAAQ,IAAA,CAAK,KAAA,CAAM,0BAAA,CAA2B;AAAA,YAClD,OAAO,IAAA,CAAK,KAAA;AAAA,YACZ,IAAA,EAAM,cAAA;AAAA,YACN,IAAA,EAAM,YAAA;AAAA,YACN,OAAA,EAAS,OAAO,YAAY,CAAA,CAAA;AAAA,YAC5B,OAAA,EAAS;AAAA,WACV,CAAA;AAED,UAAA,MAAA,EAAQ,IAAA,CAAK,sCAAA,EAAiC,EAAE,IAAA,EAAM,cAAc,CAAA;AAAA,QACtE,SAAS,SAAA,EAAW;AAClB,UAAA,MAAA,EAAQ,KAAK,iDAAA,EAAyC;AAAA,YACpD,IAAA,EAAM,QAAA,CAAS,WAAA,EAAa,QAAQ,CAAA;AAAA,YACpC,KAAA,EAAO;AAAA,WACR,CAAA;AAAA,QACH;AAAA,MACF;AAEA,MAAA,MAAA,EAAQ,KAAK,qDAAgD,CAAA;AAE7D,MAAA,OAAO;AAAA,QACL,eAAe,IAAA,CAAK,QAAA;AAAA,QACpB,OAAA,EAAS,IAAA;AAAA,QACT,OAAA,EAAS,CAAA,mCAAA,EAAsC,IAAA,CAAK,QAAQ,CAAA;AAAA,OAC9D;AAAA,IAEF,SAAS,KAAA,EAAO;AACd,MAAA,MAAA,EAAQ,KAAA,CAAM,iEAAA,EAA8D,EAAE,KAAA,EAAO,CAAA;AAErF,MAAA,OAAO;AAAA,QACL,aAAA,EAAe,EAAA;AAAA,QACf,OAAA,EAAS,KAAA;AAAA,QACT,OAAA,EAAS,gCAAgC,KAAK,CAAA;AAAA,OAChD;AAAA,IACF;AAAA,EACF;AACF,CAAC;;;;"}